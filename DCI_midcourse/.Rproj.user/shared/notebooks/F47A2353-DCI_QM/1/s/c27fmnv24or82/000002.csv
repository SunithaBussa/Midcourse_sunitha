"0","#get detail and summary data and save it in a df"
"0","detail_raw_data<-read_csv ('data/claim_details.csv' )"
"2","Duplicated column names deduplicated: 'patient_id' => 'patient_id_1' [37]"
"2","Parsed with column specification:
cols(
  .default = col_double(),
  esco_id = [31mcol_character()[39m,
  bene_hic_num = [31mcol_character()[39m,
  claim_first_dialysis_date = [31mcol_character()[39m,
  claim_last_dialysis_date = [31mcol_character()[39m,
  location_id = [31mcol_character()[39m,
  start_date = [34mcol_datetime(format = """")[39m,
  end_date = [34mcol_datetime(format = """")[39m,
  esrd_date = [34mcol_datetime(format = """")[39m,
  modality = [31mcol_character()[39m,
  hgb_cutoff = [31mcol_character()[39m,
  epo_ceiling = [31mcol_character()[39m,
  route_freq = [31mcol_character()[39m,
  drug_name = [31mcol_character()[39m,
  ferritin_cutoff = [31mcol_character()[39m,
  tsat_cutoff = [31mcol_character()[39m,
  sup_name = [31mcol_character()[39m,
  tx_epo = [31mcol_character()[39m,
  venofer_given = [31mcol_character()[39m,
  venofer_wasted = [31mcol_character()[39m,
  ferrlecit_given = [31mcol_character()[39m
  # ... with 42 more columns
)
"
"2","See spec(...) for full column specifications.
"
"2","1 parsing failure.
 row       col   expected actual                     file
7272 esrd_date date like    NULL 'data/claim_details.csv'
"
"0","dci_data<-detail_raw_data"
"0",""
"0","dci_data<-dci_data %>%"
"0","select(-esco_id,-bene_hic_num,-full_encounter,-phys_neph,-phys_hosp,-phys_ed,-ambulance,-phys_other,-esco_aligned_flag,-inpatient_fluid,-outpatient_er_fluid,-part_a_other_fluid,-patient_id_1,-dos_yyyy,-dos_mm,-esrd_date,-hgb_date,-tsat_date,-ferr_date,-albumin_date,-pth_date,-ca_date,-cca_date,-ph_date,-k_date,-urr_date,-ktv_date,-epo_given,-venofer_wasted,-inpatient_access,-outpatient_er_access,-part_a_other_access,-dci_claims,-non_dci_claims,-hha,-hospice,-dme,-start_date,-end_date,-epo_ceiling,-route_freq,-drug_name,-ferritin_cutoff,-tsat_cutoff,-hgb_cutoff,-ferrlecit_wasted,-zemplar_iv_wasted,-calcijex_iv_wasted,-feraheme_wasted,-hectorol_iv_wasted,-tx_missed,-sensipar_dispensed)"
"0",""
"0","#make sure all the columns are in correct data types."
"0",""
"0","#change claims date columns to date datatype"
"0","date_columns <- c(""claim_first_dialysis_date"",""claim_last_dialysis_date"")"
"0","dci_data[date_columns] <- lapply(dci_data[date_columns],as.Date)"
"0",""
"0","#change the other columns to factor"
"0","fac_columns <- c(""patient_id"",""dos_year"",""location_id"",""dos_month"",""modality"",""tx"",""tx_epo"",""sup_name"")"
"0","dci_data[fac_columns] <- lapply(dci_data[fac_columns],as.factor)"
"0",""
"0","#change the below columns to logical"
"0","bool_columns <- c(""epo_protocol_flag"",""iron_protocol_flag"",""nutsup_protocol_flag"",""hgb_exclude_flag"",""active_flag"")"
"0","dci_data[bool_columns] <- lapply(dci_data[bool_columns],as.logical)"
"0"," "
"0","#Make below colums as logical true if they have any value else if they have null make it logical false."
"0","dci_data<-dci_data %>% "
"0","  mutate_at(vars(""ferrlecit_given"",""feraheme_given"",""venofer_given"",""zemplar_iv_given"",""hectorol_iv_given"",""calcijex_iv_given"",""zemplar_or_given"",""hectorol_or_given"",""calcijex_iv_given"",""zemplar_or_given"",""hectorol_or_given"",""calcijex_or_given"",""activase_given"",""prostat_given"",""nepro_given"",""liquacel_given"",""has_catheter"",""aranesp_given"",""protinex_given"",""mircera_given"",""sensipar_given"",""parsabiv_given"",""protein_bar_given"","
"0","                 ""ice_cream_given"",""gelatein_given""),"
"0","            funs(case_when(.==""NULL"" ~ FALSE,"
"0","                                 TRUE ~ TRUE)))"
"0",""
"0","#FIRST make the null VALUES in char col to zero's except for date columns"
"0",""
"0","num_columns <- c(""hgb"",""tsat"",""ferr"",""albumin"",""pth"",""ca"",""cca"",""ph"",""k"",""urr"",""ktv"",""tx_epo"")"
"0","dci_data[num_columns]<-dci_data[num_columns]%>% "
"0","                            replace(.==""NULL"",""0"") "
"0",""
"0","#change all the character columns ot numeric"
"0","dci_data<-dci_data %>% mutate_if(is.character,as.numeric)"
"0"," "
"0","#names(dci_data)"
"0"," "
"0","#as for date columns we cannot replace na values ot 0. first make them character columns and then make rest to the na values to 0 in entire dataframe"
"0","dci_data$claim_first_dialysis_date <-as.character.Date(dci_data$claim_first_dialysis_date )"
"0","dci_data$claim_last_dialysis_date <-as.character.Date(dci_data$claim_last_dialysis_date )"
"0"," "
"0","#make all na values to 0 in entire dataframe"
"0"," dci_data[is.na(dci_data)]<-0"
"0","# sum(is.na(dci_data))"
"0",""
"0"," #making the dates column back to date datatype"
"0","dci_data$claim_first_dialysis_date <- as.Date(dci_data$claim_first_dialysis_date)"
"0","dci_data$claim_last_dialysis_date <- as.Date(dci_data$claim_last_dialysis_date)"
"0",""
"0","#delete the outliers( payments which are less than 1500)"
"0","dci_data<-dci_data %>% "
"0","  filter(`payment`>1500) %>% "
"0","  arrange(desc(payment))"
"0",""
"0","#combine 2 separate part_b payments to one"
"0","dci_data<-dci_data %>% "
"0","  mutate(part_b = part_b_phys + part_b_dme)"
"0",""
"0","#save to RDS file"
"0","dci_data_ws<- dci_data"
"0","saveRDS(dci_data_ws,file=""DCI_midcourse/data/dci_data.rds"")"
"0",""
